.vscode/
*.DS_Store
# GitHub's boilerplate Python gitignore
# https://github.com/github/gitignore/blob/master/Python.gitignore

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# import pytest
# from swap_meet.clothing import Clothing
# from swap_meet.decor import Decor
# from swap_meet.electronics import Electronics
# from swap_meet.vendor import Vendor
# from swap_meet.item import Item

# Testing Wave 2, Case 1
# item_a = Item("clothing")
# item_b = Item("electronics")
# item_c = Item("clothing")

# vendor = Vendor(inventory = [item_a, item_b, item_c])
# print(vendor.inventory)
# item = vendor.get_by_category(item_a)
# print(item)

# Testing Wave 3, Case 2
# item_a = "clothing"
# item_b = "clothing"
# item_c = "clothing"
# fatimah = Vendor(
#     inventory=[item_a, item_b, item_c]
# )
# # print(fatimah.inventory)

# item_d = "electronics"
# item_e = "decor"
# jolie = Vendor(
#     inventory=[item_d, item_e]
# )
# # print(jolie.inventory)

# result = fatimah.swap_items(jolie, item_e, item_d)
# print(result)
# print(fatimah.inventory)
# print(jolie.inventory)

# Testing Wave 4
# item_a = Item(category="clothing")
# item_b = Item(category="clothing")
# item_c = Item(category="clothing")

# fatimah = Vendor(
#     inventory=[item_a, item_b, item_c]
# )
# print(fatimah.inventory)

# item_d = Item(category="electronics")
# item_e = Item(category="decor")

# jolie = Vendor(
#     inventory=[item_d, item_e]
# )
# print(jolie.inventory)
# result = fatimah.swap_first_item(jolie)
# print(f" after: {fatimah.inventory}")

# Testing Wave 5
# cloth = Clothing()
# print(cloth.category)
# print(str(cloth))

# Testing Wave 6
# item_a = Clothing(condition=2.0)
# item_b = Decor(condition=2.0)
# item_c = Clothing(condition=4.0)
# item_d = Decor(condition=5.0)
# item_e = Clothing(condition=3.0)
# tai = Vendor(
#     inventory=[item_a, item_b, item_c, item_d, item_e]
# )

# # [item_a, item_c, item_e]
# best_item = tai.get_best_by_category("Clothing")
# print(best_item.condition)

# Testing Wave 6 Pt 2
# item_a = Decor(condition=2.0)
# item_b = Electronics(condition=4.0)
# item_c = Decor(condition=4.0)
# tai = Vendor(
#     inventory=[item_a, item_b, item_c]
# )

# item_d = Clothing(condition=2.0)
# item_e = Decor(condition=4.0)
# item_f = Clothing(condition=4.0)
# jesse = Vendor(
#     inventory=[item_d, item_e, item_f]
# )

# result = tai.swap_best_by_category(
#     other=jesse,
#     my_priority="Clothing",
#     their_priority="Decor"
# )
# print(result.category)
# print(result.condition)